{
  "version": 3,
  "sources": ["../../node_modules/matter-js/build/matter.js", "../../node_modules/ws/lib/stream.js", "../../node_modules/ws/lib/constants.js", "../../node_modules/ws/lib/buffer-util.js", "../../node_modules/ws/lib/limiter.js", "../../node_modules/ws/lib/permessage-deflate.js", "../../node_modules/ws/lib/validation.js", "../../node_modules/ws/lib/receiver.js", "../../node_modules/ws/lib/sender.js", "../../node_modules/ws/lib/event-target.js", "../../node_modules/ws/lib/extension.js", "../../node_modules/ws/lib/websocket.js", "../../node_modules/ws/lib/subprotocol.js", "../../node_modules/ws/lib/websocket-server.js", "../../node_modules/bitecs/src/Constants.js", "../../node_modules/bitecs/src/Storage.js", "../../node_modules/bitecs/src/Util.js", "../../node_modules/bitecs/src/Serialize.js", "../../node_modules/bitecs/src/Entity.js", "../../node_modules/bitecs/src/Query.js", "../../node_modules/bitecs/src/Component.js", "../../node_modules/bitecs/src/World.js", "../../node_modules/bitecs/src/System.js", "../../node_modules/bitecs/src/index.js", "../../shared/src/physics/vectors.ts", "../../shared/src/physics/transform.ts", "../../shared/src/physics/colliders.ts", "../../shared/src/physics/physics.ts", "../../shared/src/physics/playerCollission.ts", "../../shared/src/players/playerInput.ts", "../../shared/src/players/index.ts", "../../shared/src/utils/vector.ts", "../../shared/src/movement/index.ts", "../../shared/src/pits/index.ts", "../../shared/src/networking/networkTransform.ts", "../../shared/src/networking/index.ts", "../../shared/src/serialization/CustomDataView.ts", "../../shared/src/serialization/gameStateSerializer.ts", "../../shared/src/serialization/index.ts", "../../shared/src/time/index.ts", "../../shared/src/commands/Command.ts", "../../shared/src/commands/InputCommand.ts", "../../shared/src/constants/index.ts", "../../shared/src/state/index.ts", "../../shared/src/rounds/index.ts", "../../node_modules/ws/wrapper.mjs", "../src/networking/index.ts", "../../node_modules/mitt/src/index.ts", "../src/events/index.ts", "../src/networking/networkSyncSystem.ts", "../src/utils/events.ts", "../src/players/playerSpawnSystem.ts", "../src/players/IPlayerCommand.ts", "../src/networking/networkMessageHandler.ts", "../src/players/playerInputSystem.ts", "../src/pits/index.ts", "../src/pits/pitDamageSystem.ts", "../src/index.ts"],
  "sourcesContent": ["/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 21);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('\uD83D\uDD05 deprecated \uD83D\uDD05', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick \u2705 indicates a dependency was resolved and installed.\n     * - An orange diamond \uD83D\uDD36 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross \u274C indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('\u274C ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('\uD83D\uDD36 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('\u2705 ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(13);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(14);\nvar Pairs = __webpack_require__(20);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // update the detector bodies if they have changed\n        if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n        }\n\n        // reset all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen,\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            restingThresh = Resolver._restingThresh * timeScaleSquared,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n            restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n            NumberMaxValue = Number.MAX_VALUE,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n                \n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                    maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = NumberMaxValue;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(22);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(23);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(14);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(24);\r\nMatter.Mouse = __webpack_require__(13);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run \u27A4 use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.18.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle \u27A4 moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car \u27A4 moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody \u27A4 moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update \u27A4 replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear \u27A4 replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(13);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(14);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides \u27A4 replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});", "'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n", "'use strict';\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n", "'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n", "'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n", "'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n", "'use strict';\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntry {\n  const isValidUTF8 = require('utf-8-validate');\n\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8(buf) {\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    },\n    tokenChars\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8: _isValidUTF8,\n    tokenChars\n  };\n}\n", "'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else if (data.length === 1) {\n        return error(\n          RangeError,\n          'invalid payload length 1',\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = data.slice(2);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n", "/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n", "'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options = {}) {\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n", "'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n", "/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n  let invalidURLMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    invalidURLMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isUnixSocket && !parsedUrl.pathname) {\n    invalidURLMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidURLMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidURLMessage) {\n    const err = new SyntaxError(invalidURLMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n", "'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n", "/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key']\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n", "export const TYPES_ENUM = {\n  i8: 'i8',\n  ui8: 'ui8',\n  ui8c: 'ui8c',\n  i16: 'i16',\n  ui16: 'ui16',\n  i32: 'i32',\n  ui32: 'ui32',\n  f32: 'f32',\n  f64: 'f64',\n  eid: 'eid',\n}\n\nexport const TYPES_NAMES = {\n  i8: 'Int8',\n  ui8: 'Uint8',\n  ui8c: 'Uint8Clamped',\n  i16: 'Int16',\n  ui16: 'Uint16',\n  i32: 'Int32',\n  ui32: 'Uint32',\n  eid: 'Uint32',\n  f32: 'Float32',\n  f64: 'Float64'\n}\n\nexport const TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array,\n}\n\nexport const UNSIGNED_MAX = {\n  uint8: 2**8,\n  uint16: 2**16,\n  uint32: 2**32\n}\n", "import { TYPES, TYPES_ENUM, TYPES_NAMES, UNSIGNED_MAX } from './Constants.js'\n// import { createAllocator } from './Allocator.js'\n\nconst roundToMultiple = mul => x => Math.ceil(x / mul) * mul\nconst roundToMultiple4 = roundToMultiple(4)\n\nexport const $storeRef = Symbol('storeRef')\nexport const $storeSize = Symbol('storeSize')\nexport const $storeMaps = Symbol('storeMaps')\nexport const $storeFlattened = Symbol('storeFlattened')\nexport const $storeBase = Symbol('storeBase')\nexport const $storeType = Symbol('storeType')\n\nexport const $storeArrayElementCounts = Symbol('storeArrayElementCounts')\nexport const $storeSubarrays = Symbol('storeSubarrays')\nexport const $subarrayCursors = Symbol('subarrayCursors')\nexport const $subarray = Symbol('subarray')\nexport const $subarrayFrom = Symbol('subarrayFrom')\nexport const $subarrayTo = Symbol('subarrayTo')\nexport const $parentArray = Symbol('parentArray')\nexport const $tagStore = Symbol('tagStore')\n\nexport const $queryShadow = Symbol('queryShadow')\nexport const $serializeShadow = Symbol('serializeShadow')\n\nexport const $indexType = Symbol('indexType')\nexport const $indexBytes = Symbol('indexBytes')\n\nexport const $isEidType = Symbol('isEidType')\n\nconst stores = {}\n\n// const alloc = createAllocator()\n\nexport const resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\n  const newTa = new ta.constructor(newBuffer)\n  newTa.set(ta, 0)\n  return newTa\n}\n\nexport const createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0)\n    store[key] = store.map((_,eid) => {\n      const { length } = store[eid]\n      const start = length * eid\n      const end = start + length\n      return shadowStore.subarray(start, end)\n    })\n  } else {\n    store[key] = store.slice(0)\n  }\n}\n\nconst resizeSubarray = (metadata, store, storeSize) => {\n  const cursors = metadata[$subarrayCursors]\n  let type = store[$storeType]\n  const length = store[0].length\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (cursors[type] === 0) {\n\n    const arrayElementCount = metadata[$storeArrayElementCounts][type]\n    \n    // // for threaded impl\n    // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * storeSize))\n\n    array.set(metadata[$storeSubarrays][type])\n    \n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  const start = cursors[type]\n  const end = start + (storeSize * length)\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  // pre-generate subarrays for each eid\n  for (let eid = 0; eid < storeSize; eid++) {\n    const start = length * eid\n    const end = start + length\n    store[eid] = store[$parentArray].subarray(start, end)\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    store[eid][$subarray] = true\n  }\n\n}\n\nconst resizeRecursive = (metadata, store, size) => {\n  Object.keys(store).forEach(key => {\n    const ta = store[key]\n    if (Array.isArray(ta)) {\n      resizeSubarray(metadata, ta, size)\n      store[$storeFlattened].push(ta)\n    } else if (ArrayBuffer.isView(ta)) {\n      store[key] = resize(ta, size)\n      store[$storeFlattened].push(store[key])\n    } else if (typeof ta === 'object') {\n      resizeRecursive(metadata, store[key], size)\n    }\n  })\n}\n\nexport const resizeStore = (store, size) => {\n  if (store[$tagStore]) return\n  store[$storeSize] = size\n  store[$storeFlattened].length = 0\n  Object.keys(store[$subarrayCursors]).forEach(k => {\n    store[$subarrayCursors][k] = 0\n  })\n  resizeRecursive(store, store, size)\n}\n\nexport const resetStore = store => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      ta.fill(0)\n    })\n    Object.keys(store[$storeSubarrays]).forEach(key => {\n      store[$storeSubarrays][key].fill(0)\n    })\n  }\n}\n\nexport const resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\n      else ta[eid].fill(0)\n    })\n  }\n}\n\nconst createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\n  const buffer = new ArrayBuffer(totalBytes)\n  const store = new TYPES[type](buffer)\n  store[$isEidType] = type === TYPES_ENUM.eid\n  return store\n}\n\nexport const parentArray = store => store[$parentArray]\n\nconst createArrayStore = (metadata, type, length) => {\n  const storeSize = metadata[$storeSize]\n  const store = Array(storeSize).fill(0)\n  store[$storeType] = type\n  store[$isEidType] = type === TYPES_ENUM.eid\n\n  const cursors = metadata[$subarrayCursors]\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (!length) throw new Error('bitECS - Must define component array length')\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\n\n  // create buffer for type if it does not already exist\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayElementCount = metadata[$storeArrayElementCounts][type]\n\n    // for threaded impl\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * storeSize))\n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n\n    metadata[$storeSubarrays][type] = array\n    \n  }\n\n  const start = cursors[type]\n  const end = start + (storeSize * length)\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  // pre-generate subarrays for each eid\n  for (let eid = 0; eid < storeSize; eid++) {\n    const start = length * eid\n    const end = start + length\n    store[eid] = store[$parentArray].subarray(start, end)\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    store[eid][$subarray] = true\n  }\n\n  return store\n}\n\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\n\nexport const createStore = (schema, size) => {\n  const $store = Symbol('store')\n\n  if (!schema || !Object.keys(schema).length) {\n    // tag component\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    }\n    return stores[$store]\n  }\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  const arrayElementCounts = {}\n  const collectArrayElementCounts = s => {\n    const keys = Object.keys(s)\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayElementCounts[s[k][0]]) arrayElementCounts[s[k][0]] = 0\n        arrayElementCounts[s[k][0]] += s[k][1]\n      } else if (s[k] instanceof Object) {\n        collectArrayElementCounts(s[k])\n      }\n    }\n  }\n  collectArrayElementCounts(schema)\n\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayElementCounts]: arrayElementCounts\n  }\n\n  if (schema instanceof Object && Object.keys(schema).length) {\n\n    const recursiveTransform = (a, k) => {\n\n      if (typeof a[k] === 'string') {\n\n        a[k] = createTypeStore(a[k], size)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n\n      } else if (isArrayType(a[k])) {\n        \n        const [type, length] = a[k]\n        a[k] = createArrayStore(metadata, type, length)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n        // Object.seal(a[k])\n\n      } else if (a[k] instanceof Object) {\n        \n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\n        // Object.seal(a[k])\n        \n      }\n\n      return a\n    }\n\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\n    stores[$store][$storeBase] = () => stores[$store]\n\n    // Object.seal(stores[$store])\n\n    return stores[$store]\n\n  }\n}\n\nexport const free = (store) => {\n  delete stores[store[$storeRef]]\n}", "export const Uint32SparseSet = (length) => {\n  const dense = new Uint32Array(length)\n  const sparse = new Uint32Array(length)\n\n  let cursor = 0\n  dense.count = () => cursor + 1\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = cursor\n    dense[cursor] = val\n\n    cursor++\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense[cursor]\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n\n    cursor--\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}\n\nexport const SparseSet = () => {\n  const dense = []\n  const sparse = []\n\n  dense.sort = function (comparator) {\n    const result = Array.prototype.sort.call(this, comparator)\n\n    for(let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i\n    }\n    \n    return result\n  }\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = dense.push(val) - 1\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense.pop()\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}", "import { $indexBytes, $indexType, $isEidType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\nimport { $localEntities, $localEntityLookup } from \"./World.js\"\nimport { SparseSet } from \"./Util.js\"\n\nexport const DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n}\n\nlet resized = false\n\nexport const setSerializationResized = v => { resized = v }\n\nconst concat = (a,v) => a.concat(v)\nconst not = fn => v => !fn(v)\n\nconst storeFlattened = c => c[$storeFlattened]\nconst isFullComponent = storeFlattened\nconst isProperty = not(isFullComponent)\n\nconst isModifier = c => typeof c === 'function'\nconst isNotModifier = not(isModifier)\n\nconst isChangedModifier = c => isModifier(c) && c()[1] === 'changed'\n\nconst isWorld = w => Object.getOwnPropertySymbols(w).includes($componentMap)\n\nconst fromModifierToComponent = c => c()[0]\n\nexport const canonicalize = target => {\n\n  if (isWorld(target)) return [[],new Map()]\n\n  // aggregate full components\n  const fullComponentProps = target\n    .filter(isNotModifier)\n    .filter(isFullComponent)\n    .map(storeFlattened).reduce(concat, [])\n  \n  // aggregate changed full components\n  const changedComponentProps = target\n    .filter(isChangedModifier).map(fromModifierToComponent)\n    .filter(isFullComponent)\n    .map(storeFlattened).reduce(concat, [])\n\n  // aggregate props\n  const props = target\n    .filter(isNotModifier)\n    .filter(isProperty)\n\n  // aggregate changed props\n  const changedProps = target\n    .filter(isChangedModifier).map(fromModifierToComponent)\n    .filter(isProperty)\n  \n  const componentProps = [...fullComponentProps, ...props, ...changedComponentProps, ...changedProps]\n  const allChangedProps = [...changedComponentProps, ...changedProps].reduce((map,prop) => {\n    const $ = Symbol()\n    createShadow(prop, $)\n    map.set(prop, $)\n    return map\n  }, new Map())\n\n  return [componentProps, allChangedProps]\n}\n\n/**\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\n *\n * @param {object|array} target\n * @param {number} [maxBytes=20000000]\n * @returns {function} serializer\n */\nexport const defineSerializer = (target, maxBytes = 20000000) => {\n  const worldSerializer = isWorld(target)\n\n  let [componentProps, changedProps] = canonicalize(target)\n\n  // TODO: calculate max bytes based on target & recalc upon resize\n\n  const buffer = new ArrayBuffer(maxBytes)\n  const view = new DataView(buffer)\n\n  const entityComponentCache = new Map()\n\n  return (ents) => {\n\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (worldSerializer) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n    \n    let world\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents\n      ents = ents[$entityArray]\n    } else {\n      world = eidToWorld.get(ents[0])\n    }\n\n    let where = 0\n\n    if (!ents.length) return buffer.slice(0, where)\n\n    const cache = new Map()\n\n    // iterate over component props\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid]\n      const component = prop[$storeBase]()\n      const $diff = changedProps.get(prop)\n      const shadow = $diff ? prop[$diff] : null\n\n      if (!cache.has(component)) cache.set(component, new Map())\n\n      // write pid\n      view.setUint8(where, pid)\n      where += 1\n\n      // save space for entity count\n      const countWhere = where\n      where += 4\n\n      let writeCount = 0\n      // write eid,val\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i]\n\n        let componentCache = entityComponentCache.get(eid)\n        if (!componentCache) componentCache = entityComponentCache.set(eid, new Set()).get(eid)\n        \n        componentCache.add(eid)\n        \n        const newlyAddedComponent = \n          // if we are diffing\n          shadow \n          // and we have already iterated over this component for this entity\n          // retrieve cached value    \n          && cache.get(component).get(eid)\n          // or if entity did not have component last call\n          || !componentCache.has(component)\n          // and entity has component this call\n          && hasComponent(world, component, eid)\n\n        cache.get(component).set(eid, newlyAddedComponent)\n\n        if (newlyAddedComponent) {\n          componentCache.add(component)\n        } else if (!hasComponent(world, component, eid)) {\n          // skip if entity doesn't have this component\n          componentCache.delete(component)\n          continue\n        } \n\n        \n        const rewindWhere = where\n\n        // write eid\n        view.setUint32(where, eid)\n        where += 4\n\n        // if it's a tag store we can stop here\n        if (prop[$tagStore]) {\n          writeCount++\n          continue\n        }\n\n        // if property is an array\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace('Array', '')\n          const indexType = prop[eid][$indexType]\n          const indexBytes = prop[eid][$indexBytes]\n\n          // save space for count of dirty array elements\n          const countWhere2 = where\n          where += indexBytes\n\n          let arrayWriteCount = 0\n\n          // write index,value\n          for (let i = 0; i < prop[eid].length; i++) {\n\n            if (shadow) {\n\n              const changed = shadow[eid][i] !== prop[eid][i]\n              \n              // sync shadow\n              shadow[eid][i] = prop[eid][i]              \n\n              // if state has not changed since the last call\n              // todo: if newly added then entire component will serialize (instead of only changed values)\n              if (!changed && !newlyAddedComponent) {\n                // skip writing this value\n                continue\n              }\n            }\n            \n            // write array index\n            view[`set${indexType}`](where, i)\n            where += indexBytes\n            \n            // write value at that index\n            const value = prop[eid][i]\n            view[`set${type}`](where, value)\n            where += prop[eid].BYTES_PER_ELEMENT\n            arrayWriteCount++\n          }\n\n          if (arrayWriteCount > 0) {\n            // write total element count\n            view[`set${indexType}`](countWhere2, arrayWriteCount)\n            writeCount++\n          } else {\n            where = rewindWhere\n            continue\n          }\n        } else {\n\n          if (shadow) {\n\n            const changed = shadow[eid] !== prop[eid]\n\n            shadow[eid] = prop[eid]\n\n            // do not write value if diffing and no change\n            if (!changed && !newlyAddedComponent) {\n              // rewind the serializer\n              where = rewindWhere\n              // skip writing this value\n              continue\n            }\n\n          }  \n\n\n          const type = prop.constructor.name.replace('Array', '')\n          // set value next [type] bytes\n          view[`set${type}`](where, prop[eid])\n          where += prop.BYTES_PER_ELEMENT\n\n          writeCount++\n        }\n      }\n\n      if (writeCount > 0) {\n        // write how many eid/value pairs were written\n        view.setUint32(countWhere, writeCount)\n      } else {\n        // if nothing was written (diffed with no changes) \n        // then move cursor back 5 bytes (remove PID and countWhere space)\n        where -= 5\n      }\n    }\n    return buffer.slice(0, where)\n  }\n}\n\nconst newEntities = new Map()\n\n/**\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\n *\n * @param {object|array} target\n * @returns {function} deserializer\n */\nexport const defineDeserializer = (target) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n  let [componentProps] = canonicalize(target)\n\n  const deserializedEntities = new Set()\n\n  return (world, packet, mode=0) => {\n\n    newEntities.clear()\n    \n    if (resized) {\n      [componentProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n\n    const localEntities = world[$localEntities]\n    const localEntityLookup = world[$localEntityLookup]\n\n    const view = new DataView(packet)\n    let where = 0\n\n    while (where < packet.byteLength) {\n\n      // pid\n      const pid = view.getUint8(where)\n      where += 1\n\n      // entity count\n      const entityCount = view.getUint32(where)\n      where += 4\n\n      // component property\n      const prop = componentProps[pid]\n\n      // Get the entities and set their prop values\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where) // throws with [changed, c, changed]\n        where += 4\n\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid)\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid)\n          } else {\n            const newEid = addEntity(world)\n            localEntities.set(eid, newEid)\n            localEntityLookup.set(newEid, eid)\n            newEntities.set(eid, newEid)\n            eid = newEid\n          }\n        }\n\n        if (mode === DESERIALIZE_MODE.APPEND ||  \n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\n        ) {\n          const newEid = newEntities.get(eid) || addEntity(world)\n          newEntities.set(eid, newEid)\n          eid = newEid\n        }\n\n        const component = prop[$storeBase]()\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid)\n        }\n\n        // add eid to deserialized ents after it has been transformed by MAP mode\n        deserializedEntities.add(eid)\n\n        if (component[$tagStore]) {\n          continue\n        }\n        \n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid]\n          const count = view[`get${array[$indexType]}`](where)\n          where += array[$indexBytes]\n\n          // iterate over count\n          for (let i = 0; i < count; i++) {\n            const index = view[`get${array[$indexType]}`](where)\n            where += array[$indexBytes]\n\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\n            where += array.BYTES_PER_ELEMENT\n            if (prop[$isEidType]) {\n              let localEid\n              if (localEntities.has(value)) {\n                localEid = localEntities.get(value)\n              } else if (newEntities.has(value)) {\n                localEid = newEntities.get(value)\n              } else {\n                const newEid = addEntity(world)\n                localEntities.set(value, newEid)\n                localEntityLookup.set(newEid, value)\n                newEntities.set(value, newEid)\n                localEid = newEid\n              }\n              prop[eid][index] = localEid\n            } else prop[eid][index] = value\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\n          where += prop.BYTES_PER_ELEMENT\n\n          if (prop[$isEidType]) {\n            let localEid\n            if (localEntities.has(value)) {\n              localEid = localEntities.get(value)\n            } else if (newEntities.has(value)) {\n              localEid = newEntities.get(value)\n            } else {\n              const newEid = addEntity(world)\n              localEntities.set(value, newEid)\n              localEntityLookup.set(newEid, value)\n              newEntities.set(value, newEid)\n              localEid = newEid\n            }\n            prop[eid] = localEid\n          } else prop[eid] = value\n        }\n      }\n    }\n\n    const ents = Array.from(deserializedEntities)\n\n    deserializedEntities.clear()\n\n    return ents\n  }\n}", "import { resizeComponents } from './Component.js'\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\nimport { $localEntities, $localEntityLookup, resizeWorlds } from './World.js'\nimport { setSerializationResized } from './Serialize.js'\n\nexport const $entityMasks = Symbol('entityMasks')\nexport const $entityComponents = Symbol('entityComponents')\nexport const $entitySparseSet = Symbol('entitySparseSet')\nexport const $entityArray = Symbol('entityArray')\nexport const $entityIndices = Symbol('entityIndices')\nexport const $removedEntities = Symbol('removedEntities')\n\nlet defaultSize = 100000\n\n// need a global EID cursor which all worlds and all components know about\n// so that world entities can posess entire rows spanning all component tables\nlet globalEntityCursor = 0\nlet globalSize = defaultSize\nlet resizeThreshold = () => globalSize - (globalSize / 5)\n\nexport const getGlobalSize = () => globalSize\n\n// removed eids should also be global to prevent memory leaks\nconst removed = []\n\nexport const resetGlobals = () => {\n  globalSize = defaultSize\n  globalEntityCursor = 0\n  removed.length = 0\n}\n\nexport const getDefaultSize = () => defaultSize\n\n/**\n * Sets the default maximum number of entities for worlds and component stores.\n *\n * @param {number} size\n */\nexport const setDefaultSize = size => { \n  defaultSize = size\n  resetGlobals()\n}\n\nexport const getEntityCursor = () => globalEntityCursor\nexport const getRemovedEntities = () => removed\n\nexport const eidToWorld = new Map()\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world) => {\n\n  // if data stores are 80% full\n  if (globalEntityCursor >= resizeThreshold()) {\n    // grow by half the original size rounded up to a multiple of 4\n    const size = globalSize\n    const amount = Math.ceil((size/2) / 4) * 4\n    const newSize = size + amount\n    globalSize = newSize\n    resizeWorlds(newSize)\n    resizeComponents(newSize)\n    setSerializationResized(true)\n    console.info(`\uD83D\uDC7E bitECS - resizing all data stores from ${size} to ${newSize}`)\n  }\n\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\n  \n  world[$entitySparseSet].add(eid)\n  eidToWorld.set(eid, world)\n\n  world[$notQueries].forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].set(eid, new Set())\n\n  return eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const removeEntity = (world, eid) => {\n  // Check if entity is already removed\n  if (!world[$entitySparseSet].has(eid)) return\n\n  // Remove entity from all queries\n  // TODO: archetype graph\n  world[$queries].forEach(q => {\n    queryRemoveEntity(world, q, eid)\n  })\n\n  // Free the entity\n  removed.push(eid)\n\n  // remove all eid state from world\n  world[$entitySparseSet].remove(eid)\n  world[$entityComponents].delete(eid)\n\n  // remove from deserializer mapping\n  world[$localEntities].delete(world[$localEntityLookup].get(eid))\n  world[$localEntityLookup].delete(eid)\n\n  // Clear entity bitmasks\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world, eid) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  return Array.from(world[$entityComponents].get(eid))\n}", "import { SparseSet } from './Util.js'\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\nimport { $componentMap, registerComponent } from './Component.js'\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\n\n\n\nexport function Not(c) { return () => [c, 'not'] }\nexport function Or(c) { return () => [c, 'or'] }\nexport function Changed(c) { return () => [c, 'changed'] }\n\nexport function Any(...comps) { return function QueryAny() { return comps } }\nexport function All(...comps) { return function QueryAll() { return comps } }\nexport function None(...comps) { return function QueryNone() { return comps } }\n\nexport const $queries = Symbol('queries')\nexport const $notQueries = Symbol('notQueries')\n\nexport const $queryAny = Symbol('queryAny')\nexport const $queryAll = Symbol('queryAll')\nexport const $queryNone = Symbol('queryNone')\n\nexport const $queryMap = Symbol('queryMap')\nexport const $dirtyQueries = Symbol('$dirtyQueries')\nexport const $queryComponents = Symbol('queryComponents')\nexport const $enterQuery = Symbol('enterQuery')\nexport const $exitQuery = Symbol('exitQuery')\n\n/**\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const enterQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  const entered = q.entered.dense.slice()\n  q.entered = SparseSet()\n  return entered\n}\n\n/**\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const exitQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  const exited = q.exited.dense.slice()\n  q.exited = SparseSet()\n  return exited\n}\n\nexport const registerQuery = (world, query) => {\n\n  const components = []\n  const notComponents = []\n  const changedComponents = []\n\n  query[$queryComponents].forEach(c => {\n    if (typeof c === 'function') {\n      const [comp, mod] = c()\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\n      if (mod === 'not') {\n        notComponents.push(comp)\n      }\n      if (mod === 'changed') {\n        changedComponents.push(comp)\n        components.push(comp)\n      }\n      // if (mod === 'all') {\n      //   allComponents.push(comp)\n      // }\n      // if (mod === 'any') {\n      //   anyComponents.push(comp)\n      // }\n      // if (mod === 'none') {\n      //   noneComponents.push(comp)\n      // }\n    } else {\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\n      components.push(c)\n    }\n  })\n\n\n  const mapComponents = c => world[$componentMap].get(c)\n\n  const allComponents = components.concat(notComponents).map(mapComponents)\n\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\n  const sparseSet = SparseSet()\n\n  const archetypes = []\n  // const changed = SparseSet()\n  const changed = []\n  const toRemove = SparseSet()\n  const entered = SparseSet()\n  const exited = SparseSet()\n\n  const generations = allComponents\n    .map(c => c.generationId)\n    .reduce((a,v) => {\n      if (a.includes(v)) return a\n      a.push(v)\n      return a\n    }, [])\n\n  const reduceBitflags = (a,c) => {\n    if (!a[c.generationId]) a[c.generationId] = 0\n    a[c.generationId] |= c.bitflag\n    return a\n  }\n  const masks = components\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  const notMasks = notComponents\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  // const orMasks = orComponents\n  //   .map(mapComponents)\n  //   .reduce(reduceBitmasks, {})\n\n  const hasMasks = allComponents\n    .reduce(reduceBitflags, {})\n\n  const flatProps = components\n    .filter(c => !c[$tagStore])\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\n    .reduce((a,v) => a.concat(v), [])\n\n  const shadows = flatProps.map(prop => {\n    const $ = Symbol()\n    createShadow(prop, $)\n    return prop[$]\n  })\n\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    // orMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows,\n  })\n  \n  world[$queryMap].set(query, q)\n  world[$queries].add(q)\n  \n  allComponents.forEach(c => {\n    c.queries.add(q)\n  })\n\n  if (notComponents.length) world[$notQueries].add(q)\n\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid)) continue\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  }\n}\n\nconst diff = (q, clearDiff) => {\n  if (clearDiff) q.changed = []\n  const { flatProps, shadows } = q\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i]\n    let dirty = false\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid]\n      const shadow = shadows[pid]\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i = 0; i < prop[eid].length; i++) {\n          if (prop[eid][i] !== shadow[eid][i]) {\n            dirty = true\n            break\n          }\n        }\n        shadow[eid].set(prop[eid])\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true\n          shadow[eid] = prop[eid]\n        }\n      }\n    }\n    if (dirty) q.changed.push(eid)\n  }\n  return q.changed\n}\n\n// const queryEntityChanged = (q, eid) => {\n//   if (q.changed.has(eid)) return\n//   q.changed.add(eid)\n// }\n\n// export const entityChanged = (world, component, eid) => {\n//   const { changedQueries } = world[$componentMap].get(component)\n//   changedQueries.forEach(q => {\n//     const match = queryCheckEntity(world, q, eid)\n//     if (match) queryEntityChanged(q, eid)\n//   })\n// }\n\nconst flatten = (a,v) => a.concat(v)\n\nconst aggregateComponentsFor = mod => x => x.filter(f => f.name === mod().constructor.name).reduce(flatten)\n\nconst getAnyComponents = aggregateComponentsFor(Any)\nconst getAllComponents = aggregateComponentsFor(All)\nconst getNoneComponents = aggregateComponentsFor(None)\n\n/**\n * Defines a query function which returns a matching set of entities when called on a world.\n *\n * @param {array} components\n * @returns {function} query\n */\n\nexport const defineQuery = (...args) => {\n  let components\n  let any, all, none\n  if (Array.isArray(args[0])) {\n    components = args[0]\n  } else {\n    // any = getAnyComponents(args)\n    // all = getAllComponents(args)\n    // none = getNoneComponents(args)\n  }\n  \n\n  if (components === undefined || components[$componentMap] !== undefined) {\n    return world => world ? world[$entityArray] : components[$entityArray]\n  }\n\n  const query = function (world, clearDiff=true) {\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\n\n    const q = world[$queryMap].get(query)\n\n    commitRemovals(world)\n\n    if (q.changedComponents.length) return diff(q, clearDiff)\n    // if (q.changedComponents.length) return q.changed.dense\n\n    return q.dense\n  }\n\n  query[$queryComponents] = components\n  query[$queryAny] = any\n  query[$queryAll] = all\n  query[$queryNone] = none\n\n  return query\n}\n\nconst bin = value => {\n  if (!Number.isSafeInteger(value)) {\n    throw new TypeError('value must be a safe integer');\n  }\n\n  const negative = value < 0;\n  const twosComplement = negative ? Number.MAX_SAFE_INTEGER + value + 1 : value;\n  const signExtend = negative ? '1' : '0';\n\n  return twosComplement.toString(2).padStart(4, '0').padStart(0, signExtend);\n}\n\n// TODO: archetype graph\nexport const queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q\n  let or = 0\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i]\n    const qMask = masks[generationId]\n    const qNotMask = notMasks[generationId]\n    // const qOrMask = orMasks[generationId]\n    const eMask = world[$entityMasks][generationId][eid]\n    \n    // any\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\n    //   continue\n    // }\n    // not all \n    // if (qNotMask && (eMask & qNotMask) === qNotMask) {\n    // }\n    // not any\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false\n    }\n    // all\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const queryCheckComponent = (q, c) => {\n  const { generationId, bitflag } = c\n  const { hasMasks } = q\n  const mask = hasMasks[generationId]\n  return (mask & bitflag) === bitflag\n}\n\nexport const queryAddEntity = (q, eid) => {\n  q.toRemove.remove(eid)\n  if (!q.has(eid)) q.entered.add(eid)\n  q.add(eid)\n}\n\nconst queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length-1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i]\n    q.toRemove.remove(eid)\n    q.remove(eid)\n  }\n}\n\nexport const commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size) return\n  world[$dirtyQueries].forEach(queryCommitRemovals)\n  world[$dirtyQueries].clear()\n}\n\nexport const queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid)) return\n  q.toRemove.add(eid)\n  world[$dirtyQueries].add(q)\n  q.exited.add(eid)\n}\n\n\n/**\n * Resets a Changed-based query, clearing the underlying list of changed entities.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  q.changed = []\n}\n\n/**\n * Removes a query from a world.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  world[$queries].delete(q)\n  world[$queryMap].delete(query)\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, commitRemovals } from './Query.js'\nimport { $bitflag, $size } from './World.js'\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents, getGlobalSize, $entitySparseSet } from './Entity.js'\n\nexport const $componentMap = Symbol('componentMap')\n\nexport const components = []\n\nexport const resizeComponents = (size) => {\n  components.forEach(component => resizeStore(component, size))\n}\n\n\n/**\n * Defines a new component store.\n *\n * @param {object} schema\n * @returns {object}\n */\nexport const defineComponent = (schema) => {\n  const component = createStore(schema, getGlobalSize())\n  if (schema && Object.keys(schema).length) components.push(component)\n  return component\n}\n\nexport const incrementBitflag = (world) => {\n  world[$bitflag] *= 2\n  if (world[$bitflag] >= 2**31) {\n    world[$bitflag] = 1\n    world[$entityMasks].push(new Uint32Array(world[$size]))\n  }\n}\n\n\n/**\n * Registers a component with a world.\n *\n * @param {World} world\n * @param {Component} component\n */\nexport const registerComponent = (world, component) => {\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\n\n  const queries = new Set()\n  const notQueries = new Set()\n  const changedQueries = new Set()\n\n  world[$queries].forEach(q => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q)\n    }\n  })\n\n  world[$componentMap].set(component, { \n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries,\n  })\n\n  if (component[$storeSize] < getGlobalSize()) {\n    resizeStore(component, getGlobalSize())\n  }\n\n  incrementBitflag(world)\n}\n\n/**\n * Registers multiple components with a world.\n *\n * @param {World} world\n * @param {Component} components\n */\nexport const registerComponents = (world, components) => {\n  components.forEach(c => registerComponent(world, c))\n}\n\n/**\n * Checks if an entity has a component.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @returns {boolean}\n */\nexport const hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component)\n  if (!registeredComponent) return false\n  const { generationId, bitflag } = registeredComponent\n  const mask = world[$entityMasks][generationId][eid]\n  return (mask & bitflag) === bitflag\n}\n\n/**\n * Adds a component to an entity\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=false]\n */\nexport const addComponent = (world, component, eid, reset=true) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\n  if (hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n    \n  // Add bitflag to entity bitmask\n  world[$entityMasks][generationId][eid] |= bitflag\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).add(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n\n/**\n * Removes a component from an entity and resets component state unless otherwise specified.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=true]\n */\nexport const removeComponent = (world, component, eid, reset=false) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries } = c\n\n  // Remove flag from entity bitmask\n  world[$entityMasks][generationId][eid] &= ~bitflag\n  \n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).delete(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n", "import { $componentMap } from './Component.js'\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\nimport { resize } from './Storage.js'\nimport { SparseSet } from './Util.js'\n\nexport const $size = Symbol('size')\nexport const $resizeThreshold = Symbol('resizeThreshold')\nexport const $bitflag = Symbol('bitflag')\nexport const $archetypes = Symbol('archetypes')\nexport const $localEntities = Symbol('localEntities')\nexport const $localEntityLookup = Symbol('localEntityLookp')\n\nexport const worlds = []\n\nexport const resizeWorlds = (size) => {\n  worlds.forEach(world => {\n    world[$size] = size\n\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size)\n    }\n    \n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\n  })\n}\n\n/**\n * Creates a new world.\n *\n * @returns {object}\n */\nexport const createWorld = (obj={}) => {\n  const world = obj\n  resetWorld(world)\n  worlds.push(world)\n  return world\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world) => {\n  const size = getGlobalSize()\n  world[$size] = size\n\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\n\n  world[$entityMasks] = [new Uint32Array(size)]\n  world[$entityComponents] = new Map()\n  world[$archetypes] = []\n\n  world[$entitySparseSet] = SparseSet()\n  world[$entityArray] = world[$entitySparseSet].dense\n\n  world[$bitflag] = 1\n\n  world[$componentMap] = new Map()\n\n  world[$queryMap] = new Map()\n  world[$queries] = new Set()\n  world[$notQueries] = new Set()\n  world[$dirtyQueries] = new Set()\n\n  world[$localEntities] = new Map()\n  world[$localEntityLookup] = new Map()\n\n  return world\n}\n\n/**\n * Deletes a world.\n *\n * @param {World} world\n */\nexport const deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\n  Object.keys(world).forEach(key => { delete world[key] })\n  worlds.splice(worlds.indexOf(world), 1)\n}\n", "/**\n * Defines a new system function.\n *\n * @param {function} update\n * @returns {function}\n */\n export const defineSystem = (update) => (world, ...args) => {\n  update(world, ...args)\n  return world\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity.js'\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\nimport { defineSystem } from './System.js'\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\nimport { parentArray } from './Storage.js'\nimport { TYPES_ENUM } from './Constants.js'\n\nexport const pipe = (...fns) => (input) => {\n  let tmp = input\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i]\n    tmp = fn(tmp)\n  }\n  return tmp\n}\n\nexport const Types = TYPES_ENUM\n\nexport {\n\n  setDefaultSize,\n  createWorld,\n  resetWorld,\n  deleteWorld,\n  addEntity,\n  removeEntity,\n\n  registerComponent,\n  registerComponents,\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  getEntityComponents,\n\n  defineQuery,\n  Changed,\n  Not,\n  enterQuery,\n  exitQuery,\n  commitRemovals,\n  resetChangedQuery,\n  removeQuery,\n\n  defineSystem,\n  \n  defineSerializer,\n  defineDeserializer,\n  DESERIALIZE_MODE,\n\n  parentArray,\n\n}\n", "import { Types } from \"bitecs\";\n\nexport const Vector2 = { x: Types.f32, y: Types.f32 };\n", "import { defineComponent, Types } from \"bitecs\";\nimport { Vector2 } from \"./vectors\";\n\nexport const Transform = defineComponent(Vector2);\n", "import { defineComponent, Types } from \"bitecs\";\n\nexport const CircleCollider = defineComponent({ radius: Types.f32 });\n", "import { defineQuery, enterQuery, exitQuery, IWorld } from \"bitecs\";\nimport Matter from \"matter-js\";\nimport {\n    Bodies,\n    Body,\n    Engine,\n    IChamferableBodyDefinition,\n    Runner,\n    World,\n} from \"matter-js\";\nimport { CircleCollider, Transform } from \".\";\nimport { IRoundsWorld, RoundState } from \"..\";\n\nexport function createPhysicsSystem(world: IWorld) {\n    const engine = Engine.create({ gravity: { y: 0 }, velocityIterations: 6 });\n    (Matter as any).Resolver._restingThresh = 0.01;\n    const bodyByEntity = new Map<number, Body>();\n\n    world.physics = { engine, bodyByEntity };\n\n    const circleColliderQuery = defineQuery([CircleCollider, Transform]);\n    const enteredCircleColliderQuery = enterQuery(circleColliderQuery);\n    const exitedCircleColliderQuery = exitQuery(circleColliderQuery);\n\n    createBounds(engine, 1366 / 4, 768 / 4);\n\n    return (world: IWorld & IRoundsWorld) => {\n        const {\n            time: { delta },\n        } = world;\n\n        const circleColliders = circleColliderQuery(world);\n        const enteredCircleColliders = enteredCircleColliderQuery(world);\n        const exitedCircleColliders = exitedCircleColliderQuery(world);\n\n        for (const entity of enteredCircleColliders) {\n            const body = Bodies.circle(\n                Transform.x[entity],\n                Transform.y[entity],\n                CircleCollider.radius[entity],\n                {\n                    mass: 1,\n                    frictionAir: 0,\n                    friction: 0,\n                    frictionStatic: 0,\n                    restitution: 0.5,\n                    inertia: Infinity,\n                    slop: 0.01,\n                },\n                64\n            );\n\n            World.add(engine.world, body);\n\n            bodyByEntity.set(entity, body);\n        }\n\n        for (const entity of exitedCircleColliders) {\n            const body = bodyByEntity.get(entity)!;\n            World.remove(engine.world, body);\n            bodyByEntity.delete(entity);\n        }\n\n        for (const eid of circleColliders) {\n            const body = bodyByEntity.get(eid)!;\n\n            if (\n                Transform.x[eid] !== body.position.x ||\n                Transform.y[eid] !== body.position.y\n            ) {\n                Body.setPosition(body, {\n                    x: Transform.x[eid],\n                    y: Transform.y[eid],\n                });\n            }\n        }\n\n        if (world.rounds.state == RoundState.InRound) {\n            Engine.update(engine, delta, 1);\n        }\n\n        for (const eid of circleColliders) {\n            const body = bodyByEntity.get(eid)!;\n\n            if (\n                Transform.x[eid] !== body.position.x ||\n                Transform.y[eid] !== body.position.y\n            ) {\n                Transform.x[eid] = body.position.x;\n                Transform.y[eid] = body.position.y;\n            }\n        }\n\n        return world;\n    };\n}\n\nfunction createBounds(engine: Engine, width: number, height: number) {\n    const bodySettings: IChamferableBodyDefinition = {\n        isStatic: true,\n        restitution: 1,\n        inertia: Infinity,\n    };\n\n    const SIZE = 100;\n    const HALF_SIZE = SIZE / 2;\n    const bodyUp = Bodies.rectangle(\n        width / 2,\n        -HALF_SIZE,\n        width,\n        SIZE,\n        bodySettings\n    );\n    World.add(engine.world, bodyUp);\n    bodyUp.restitution = 0.5;\n\n    const bodyDown = Bodies.rectangle(\n        width / 2,\n        height + HALF_SIZE,\n        width,\n        SIZE,\n        bodySettings\n    );\n    World.add(engine.world, bodyDown);\n    bodyDown.restitution = 0.5;\n\n    const bodyRight = Bodies.rectangle(\n        -HALF_SIZE,\n        height / 2,\n        SIZE,\n        height,\n        bodySettings\n    );\n    World.add(engine.world, bodyRight);\n    bodyRight.restitution = 0.5;\n\n    const bodyLeft = Bodies.rectangle(\n        width + HALF_SIZE,\n        height / 2,\n        SIZE,\n        height,\n        bodySettings\n    );\n    World.add(engine.world, bodyLeft);\n    bodyLeft.restitution = 0.5;\n}\n", "import { defineQuery, IWorld } from \"bitecs\";\nimport Matter, { Body, Vector } from \"matter-js\";\nimport { CircleCollider } from \".\";\n// @ts-ignore\nimport { Detector } from \"matter-js\";\nimport { Player } from \"..\";\n\nconst MIN_COLLISION_FORCE = 0.005;\n\nexport function createPlayerCollissionSystem() {\n    const playerQuery = defineQuery([Player, CircleCollider]);\n\n    return function playerCollissionSystem(world: IWorld): IWorld {\n        const {\n            physics: { bodyByEntity, engine },\n        } = world as {\n            physics: { bodyByEntity: Map<number, Body>; engine: Matter.Engine };\n        };\n\n        const players = playerQuery(world);\n\n        const bodies = new Set(players.map((eid) => bodyByEntity.get(eid)?.id));\n\n        const collissions = Detector.collisions((engine as any).detector);\n\n        for (const collission of collissions) {\n            if (\n                !bodies.has(collission.bodyA.id) ||\n                !bodies.has(collission.bodyB.id)\n            ) {\n                continue;\n            }\n\n            const force = Vector.mult(\n                Vector.normalise(\n                    Vector.sub(\n                        collission.bodyA.position,\n                        collission.bodyB.position\n                    )\n                ),\n                MIN_COLLISION_FORCE\n            );\n\n            const force2 = Vector.mult(\n                Vector.normalise(\n                    Vector.sub(\n                        collission.bodyB.position,\n                        collission.bodyA.position\n                    )\n                ),\n                MIN_COLLISION_FORCE\n            );\n\n            Body.setVelocity(collission.bodyA, Vector.create());\n            Body.setVelocity(collission.bodyB, Vector.create());\n\n            Body.applyForce(collission.bodyA, collission.bodyB.position, force);\n            Body.applyForce(\n                collission.bodyB,\n                collission.bodyB.position,\n                force2\n            );\n        }\n\n        return world;\n    };\n}\n", "import { defineComponent } from \"bitecs\";\nimport { Vector2 } from \"..\";\n\nexport const PlayerInput = defineComponent({\n    axes: Vector2,\n});\n", "import { defineComponent, Types } from \"bitecs\";\n\nexport * from \"./playerInput\";\n\nexport const Player = defineComponent({ id: Types.ui8, dead: Types.ui8 });\n", "export interface Vector {\n    x: number;\n    y: number;\n}\n\nexport function vectorLength({ x, y }: { x: number; y: number }) {\n    return Math.sqrt(x ** 2 + y ** 2);\n}\n\nexport function vectorNormalize({ x, y }: { x: number; y: number }) {\n    const length = vectorLength({ x, y });\n\n    return {\n        x: x / length,\n        y: y / length,\n    };\n}\n\nexport function vectorMult({ x, y }: { x: number; y: number }, n: number) {\n    return {\n        x: x * n,\n        y: y * n,\n    };\n}\n\nexport function vectorEq(a: Vector, b: Vector) {\n    return a.x == b.x && a.y == b.y;\n}\n\nexport function vectorAdd(a: Vector, b: Vector) {\n    return {\n        x: a.x + b.x,\n        y: a.y + b.y,\n    };\n}\n\nexport function vectorInv({ x, y }: Vector) {\n    return {\n        x: -x,\n        y: -y,\n    };\n}\n\nexport function vectorSub(a: Vector, b: Vector) {\n    return vectorAdd(a, vectorInv(b));\n}\n", "import { defineQuery, IWorld } from \"bitecs\";\n\nimport { Body } from \"matter-js\";\nimport {\n    Player,\n    CircleCollider,\n    PlayerInput,\n    vectorLength,\n    IRoundsWorld,\n    RoundState,\n} from \"..\";\n\nconst FORCE = 0.0001;\nconst MAX_VELOCITY = 1.5;\n\nexport function createPlayerMovementSystem(world: IWorld) {\n    const playerQuery = defineQuery([Player, CircleCollider, PlayerInput]);\n\n    const {\n        physics: { bodyByEntity },\n    } = world as { physics: { bodyByEntity: Map<number, Body> } };\n\n    return function playerMovementSystem(world: IWorld & IRoundsWorld): IWorld {\n        if (world.rounds.state !== RoundState.InRound) {\n            return world;\n        }\n\n        const players = playerQuery(world);\n\n        for (const eid of players) {\n            const body = bodyByEntity.get(eid);\n\n            if (body) {\n                Body.applyForce(body, body.position, {\n                    x: PlayerInput.axes.x[eid] * FORCE,\n                    y: PlayerInput.axes.y[eid] * FORCE,\n                });\n            }\n        }\n\n        return world;\n    };\n}\n", "import { defineComponent, Types } from \"bitecs\";\n\nexport const Pit = defineComponent({ size: Types.ui8 });\n", "import { defineComponent } from \"bitecs\";\nimport { Vector2 } from \"..\";\n\nexport const NetworkTransform = defineComponent(Vector2);\n", "import { defineComponent } from \"bitecs\";\n\nexport * from \"./NetworkMessage\";\nexport * from \"./networkTransform\";\n\nexport const NetworkSync = defineComponent();\n", "import { Vector } from \"..\";\n\nexport interface ICustomDataView {\n    dataView: DataView;\n    pos: number;\n}\n\nexport function createCustomDataView(dataView: DataView | ArrayBuffer) {\n    const view =\n        dataView instanceof DataView ? dataView : new DataView(dataView);\n\n    return {\n        dataView: view,\n        pos: 0,\n    };\n}\n\ntype DataViewWriteFn =\n    | \"setFloat32\"\n    | \"setFloat64\"\n    | \"setInt8\"\n    | \"setInt16\"\n    | \"setInt32\"\n    | \"setUint8\"\n    | \"setUint16\"\n    | \"setUint32\";\n\ntype DataViewReadFn =\n    | \"getFloat32\"\n    | \"getFloat64\"\n    | \"getInt8\"\n    | \"getInt16\"\n    | \"getInt32\"\n    | \"getUint8\"\n    | \"getUint16\"\n    | \"getUint32\";\n\nfunction write(\n    view: ICustomDataView,\n    method: DataViewWriteFn,\n    data: number,\n    bytes: number\n) {\n    view.dataView[method](view.pos, data);\n    view.pos += bytes;\n}\n\nfunction read(view: ICustomDataView, method: DataViewReadFn, bytes: number) {\n    const data = view.dataView[method](view.pos);\n    view.pos += bytes;\n\n    return data;\n}\n\n// Built in write.\nexport function writeFloat32(view: ICustomDataView, n: number) {\n    write(view, \"setFloat32\", n, 4);\n}\n\nexport function writeFloat64(view: ICustomDataView, n: number) {\n    write(view, \"setFloat64\", n, 8);\n}\n\nexport function writeInt8(view: ICustomDataView, n: number) {\n    write(view, \"setInt8\", n, 1);\n}\n\nexport function writeInt16(view: ICustomDataView, n: number) {\n    write(view, \"setInt16\", n, 2);\n}\n\nexport function writeInt32(view: ICustomDataView, n: number) {\n    write(view, \"setInt32\", n, 4);\n}\n\nexport function writeUint8(view: ICustomDataView, n: number) {\n    write(view, \"setUint8\", n, 1);\n}\n\nexport function writeUint16(view: ICustomDataView, n: number) {\n    write(view, \"setUint16\", n, 2);\n}\n\nexport function writeUint32(view: ICustomDataView, n: number) {\n    write(view, \"setUint32\", n, 4);\n}\n\n// Custom write.\nexport function writeVector2(view: ICustomDataView, vector: Vector) {\n    writeFloat32(view, vector.x);\n    writeFloat32(view, vector.y);\n}\n\n// Built in read.\nexport function readFloat32(view: ICustomDataView): number {\n    return read(view, \"getFloat32\", 4);\n}\n\nexport function readFloat64(view: ICustomDataView): number {\n    return read(view, \"getFloat64\", 8);\n}\n\nexport function readInt8(view: ICustomDataView): number {\n    return read(view, \"getInt8\", 1);\n}\n\nexport function readInt16(view: ICustomDataView): number {\n    return read(view, \"getInt16\", 2);\n}\n\nexport function readInt32(view: ICustomDataView): number {\n    return read(view, \"getInt32\", 4);\n}\n\nexport function readUint8(view: ICustomDataView): number {\n    return read(view, \"getUint8\", 1);\n}\n\nexport function readUint16(view: ICustomDataView): number {\n    return read(view, \"getUint16\", 2);\n}\n\nexport function readUint32(view: ICustomDataView): number {\n    return read(view, \"getUint32\", 4);\n}\n\n// Custom read.\nexport function readVector2(view: ICustomDataView) {\n    return {\n        x: readFloat32(view),\n        y: readFloat32(view),\n    };\n}\n", "import {\n    createCustomDataView,\n    ICustomDataView,\n    readUint8,\n    writeUint8,\n} from \".\";\nimport { createGameState, IGameState } from \"..\";\n\nexport function serializeGameState(gameState: IGameState) {\n    const buffer = new ArrayBuffer(1024);\n    const view = createCustomDataView(buffer);\n\n    writeUint8(view, gameState.round);\n    writeUint8(view, gameState.players);\n\n    return buffer.slice(0, view.pos);\n}\n\nexport function deserializeGameState(view: ICustomDataView) {\n    return createGameState(readUint8(view), readUint8(view));\n}\n", "import { CircleCollider, Player, PlayerInput } from \"..\";\nimport { Pit } from \"../pits\";\nimport { NetworkSync } from \"../networking\";\nimport { NetworkTransform } from \"../networking/networkTransform\";\n\nexport * from \"./CustomDataView\";\nexport * from \"./gameStateSerializer\";\n\nexport const serializationConfig = [\n    NetworkTransform,\n    Player,\n    CircleCollider,\n    PlayerInput,\n    NetworkSync,\n    Pit,\n];\n", "import { IWorld } from \"bitecs\";\n\nexport function createTimeSystem(world: IWorld) {\n    world.time = {\n        delta: 0,\n        elapsed: 0,\n        previous: performance.now(),\n    };\n\n    return function timeSystem(world: IWorld) {\n        const { time } = world;\n\n        const now = performance.now();\n        const delta = now - time.previous;\n        time.delta = delta;\n        time.elapsed += delta;\n        time.previous = now;\n\n        return world;\n    };\n}\n", "import {\n    deserializeInputCommand,\n    IInputCommand,\n    serializeInputCommand,\n} from \".\";\nimport { ICustomDataView, readUint8, writeUint8 } from \"..\";\nimport { CommandType } from \"./CommandType\";\n\nexport interface ICommand {\n    type: CommandType;\n}\n\nexport function serializeCommand(view: ICustomDataView, cmd: ICommand) {\n    writeUint8(view, cmd.type);\n    switch (cmd.type) {\n        case CommandType.Input:\n            serializeInputCommand(view, cmd as IInputCommand);\n            break;\n\n        default:\n            throw new Error(\n                \"Command type \" + cmd.type + \" not recognized while serializing\"\n            );\n    }\n}\n\nexport function deserializeCommand(view: ICustomDataView): ICommand {\n    const type = readUint8(view);\n\n    switch (type) {\n        case CommandType.Input:\n            return deserializeInputCommand(view);\n\n        default:\n            throw new Error(\n                \"Command type \" + type + \" not recognized while deserializing\"\n            );\n    }\n}\n", "import { Vector } from \"..\";\nimport { ICommand } from \"./Command\";\nimport { CommandType } from \"./CommandType\";\nimport { ICustomDataView, readVector2, writeVector2 } from \"../serialization\";\n\nexport interface IInputCommand extends ICommand {\n    axes: Vector;\n}\n\nexport function createInputCommand(axes: Vector): IInputCommand {\n    return {\n        type: CommandType.Input,\n        axes,\n    };\n}\n\nexport function serializeInputCommand(\n    view: ICustomDataView,\n    cmd: IInputCommand\n) {\n    writeVector2(view, cmd.axes);\n}\n\nexport function deserializeInputCommand(view: ICustomDataView): IInputCommand {\n    const axes = readVector2(view);\n    return createInputCommand(axes);\n}\n", "export const WORLD_HEIGHT = 768 / 4;\nexport const WORLD_WIDTH = 1366 / 4;\n", "import { IWorld } from \"bitecs\";\n\nexport interface IGameState {\n    round: number;\n    players: number;\n}\n\nexport interface IGameStateWorld {\n    gameState: IGameState;\n}\n\nexport function setupGameState(world: IWorld) {\n    world.gameState = createGameState(0, 0);\n}\n\nexport function createGameState(round: number, players: number): IGameState {\n    return {\n        round,\n        players,\n    };\n}\n", "import { defineQuery, defineSystem, IWorld } from \"bitecs\";\nimport { Player } from \"roll-rounds-shared\";\nimport { IGameStateWorld } from \"../state\";\n\nexport enum RoundState {\n    Waiting,\n    CountDown,\n    InRound,\n}\n\nexport interface IRoundsWorld {\n    rounds: {\n        state: RoundState;\n        currentCountDown: number;\n    };\n}\n\nconst COUNT_DOWN = 5000;\n\nexport function createRoundSystem(world: IWorld & IRoundsWorld) {\n    const playerQuery = defineQuery([Player]);\n\n    world.rounds = {\n        state: RoundState.Waiting,\n        currentCountDown: 0,\n    };\n\n    return (world: IWorld & IRoundsWorld & IGameStateWorld) => {\n        const players = playerQuery(world);\n\n        switch (world.rounds.state) {\n            case RoundState.Waiting:\n                if (players.length > 1) {\n                    world.rounds.state = RoundState.CountDown;\n                    world.rounds.currentCountDown = COUNT_DOWN;\n                    world.gameState.round++;\n                }\n\n                break;\n\n            case RoundState.CountDown:\n                world.rounds.currentCountDown -= world.time.delta;\n\n                console.log(world.rounds.currentCountDown);\n                if (world.rounds.currentCountDown <= 0) {\n                    world.rounds.state = RoundState.InRound;\n                }\n                break;\n\n            case RoundState.InRound:\n                if (players.length < 2) {\n                    world.rounds.state = RoundState.CountDown;\n                    world.rounds.currentCountDown = COUNT_DOWN;\n                    world.gameState.round++;\n                }\n\n                if (world.gameState.players < 2) {\n                    world.rounds.state = RoundState.Waiting;\n                }\n                break;\n        }\n\n        return world;\n    };\n}\n", "import createWebSocketStream from './lib/stream.js';\nimport Receiver from './lib/receiver.js';\nimport Sender from './lib/sender.js';\nimport WebSocket from './lib/websocket.js';\nimport WebSocketServer from './lib/websocket-server.js';\n\nexport { createWebSocketStream, Receiver, Sender, WebSocket, WebSocketServer };\nexport default WebSocket;\n", "import { IWorld } from \"bitecs\";\nimport { Emitter } from \"mitt\";\nimport { IGameStateWorld } from \"roll-rounds-shared\";\nimport { WebSocketServer } from \"ws\";\nimport { IEventWorld } from \"../events\";\nimport { NetworkEvent } from \"./events\";\n\nexport function setupWsServer(world: IWorld & IEventWorld & IGameStateWorld) {\n    const wss = new WebSocketServer({\n        port: 3001,\n    });\n\n    world.wss = wss;\n\n    wss.on(\"connection\", (ws) => {\n        world.events.emit(NetworkEvent.Connect, ws);\n\n        ws.on(\"close\", () => {\n            world.events.emit(NetworkEvent.Disconnect, ws);\n        });\n\n        ws.on(\"message\", (e: Buffer) => {\n            world.events.emit(NetworkEvent.Message, [\n                ws,\n                new Uint8Array(e).buffer,\n            ]);\n        });\n    });\n}\n\nexport function setupNetworkWorld(world: IWorld) {\n    const entityById = new Map<number, number>();\n    const socketById = new Map<number, WebSocket>();\n    const idBySocket = new Map<WebSocket, number>();\n\n    world.networking = { entityById, socketById, idBySocket };\n}\n\nexport interface INetworkWorld {\n    networking: {\n        entityById: Map<number, number>;\n        socketById: Map<number, WebSocket>;\n        idBySocket: Map<WebSocket, number>;\n    };\n}\n", "export type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (\n\ttype: keyof T,\n\tevent: T[keyof T]\n) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<WildcardHandler<T>>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n\tkeyof Events | '*',\n\tEventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n\tall: EventHandlerMap<Events>;\n\n\ton<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n\ton(type: '*', handler: WildcardHandler<Events>): void;\n\n\toff<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;\n\toff(type: '*', handler: WildcardHandler<Events>): void;\n\n\temit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n\temit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport default function mitt<Events extends Record<EventType, unknown>>(\n\tall?: EventHandlerMap<Events>\n): Emitter<Events> {\n\ttype GenericEventHandler =\n\t\t| Handler<Events[keyof Events]>\n\t\t| WildcardHandler<Events>;\n\tall = all || new Map();\n\n\treturn {\n\n\t\t/**\n\t\t * A Map of event names to registered handler functions.\n\t\t */\n\t\tall,\n\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n\t\t * @param {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.push(handler);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tall!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t * If `handler` is omitted, all handlers of the given type are removed.\n\t\t * @param {string|symbol} type Type of event to unregister `handler` from, or `'*'`\n\t\t * @param {Function} [handler] Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\tif (handler) {\n\t\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tall!.set(type, []);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `'*'` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * Note: Manually firing '*' handlers is not supported.\n\t\t *\n\t\t * @param {string|symbol} type The event type to invoke\n\t\t * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n\t\t\tlet handlers = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as EventHandlerList<Events[keyof Events]>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(evt!);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\thandlers = all!.get('*');\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as WildCardEventHandlerList<Events>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(type, evt!);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n", "import { IWorld } from \"bitecs\";\nimport mitt, { Emitter, EventType } from \"mitt\";\n\nexport function setupEventQueue(world: IWorld): IWorld & IEventWorld {\n    world.events = mitt();\n\n    return world as IWorld & IEventWorld;\n}\n\nexport interface IEventWorld {\n    events: Emitter<Record<any, any>>;\n}\n", "import { defineQuery, defineSerializer, IWorld } from \"bitecs\";\nimport {\n    serializationConfig,\n    Transform,\n    NetworkSync,\n    NetworkTransform,\n    serializeGameState,\n    IGameStateWorld,\n} from \"roll-rounds-shared\";\n\nimport { INetworkWorld } from \".\";\nimport { IEventWorld } from \"../events\";\n\nexport function createNetworkSyncSystem(\n    world: IWorld & IEventWorld & INetworkWorld & IGameStateWorld\n) {\n    const { wss, gameState } = world;\n\n    const transformQuery = defineQuery([Transform, NetworkTransform]);\n\n    const syncQuery = defineQuery([NetworkSync]);\n    // console.log(serializationConfig);\n    const serializer = defineSerializer(serializationConfig);\n\n    return (world: IWorld) => {\n        const networkTransformEntities = transformQuery(world);\n        for (const eid of networkTransformEntities) {\n            NetworkTransform.x[eid] = Transform.x[eid];\n            NetworkTransform.y[eid] = Transform.y[eid];\n        }\n\n        const syncEntities = syncQuery(world);\n\n        const gameStateBuffer = serializeGameState(gameState);\n        const ecsState = serializer(syncEntities);\n\n        const packet = concatenate(gameStateBuffer, ecsState);\n\n        for (const client of wss.clients) {\n            client.send(packet);\n        }\n\n        return world;\n    };\n}\n\nfunction concatenate(...arrayBuffer: ArrayBuffer[]) {\n    const size = arrayBuffer.reduce((a, b) => a + b.byteLength, 0);\n    const result = new Uint8Array(size);\n\n    let offset = 0;\n    for (const arr of arrayBuffer) {\n        result.set(new Uint8Array(arr), offset);\n        offset += arr.byteLength;\n    }\n\n    return result.buffer;\n}\n", "import { Emitter, EventType } from \"mitt\";\n\nexport class EventQueue<T> {\n    queue: T[];\n\n    constructor() {\n        this.queue = [];\n    }\n\n    [Symbol.iterator]() {\n        return {\n            next: () =>\n                this.queue.length > 0\n                    ? {\n                          value: this.queue.shift(),\n                          done: false,\n                      }\n                    : {\n                          done: true,\n                      },\n        };\n    }\n\n    push(...items: T[]) {\n        this.queue.push(...items);\n    }\n}\n\nexport function createEventQueue<T>(\n    events: Emitter<Record<EventType, unknown>>,\n    type: any\n) {\n    const queue = new EventQueue<T>();\n\n    events.on(type, (e: any) => queue.push(e));\n\n    return queue;\n}\n", "import {\n    addComponent,\n    addEntity,\n    defineSystem,\n    IWorld,\n    removeEntity,\n} from \"bitecs\";\nimport {\n    CircleCollider,\n    IGameStateWorld,\n    Player,\n    PlayerInput,\n    Transform,\n    Vector,\n} from \"roll-rounds-shared\";\nimport { NetworkSync } from \"roll-rounds-shared/src/networking\";\nimport { NetworkTransform } from \"roll-rounds-shared/src/networking/networkTransform\";\nimport { INetworkWorld } from \"../networking\";\nimport { NetworkEvent } from \"../networking/events\";\nimport { createEventQueue } from \"../utils/events\";\n\nexport function createPlayerSpawnSystem(\n    world: IWorld & INetworkWorld & IGameStateWorld\n) {\n    const { entityById, socketById, idBySocket } = world.networking;\n    const { gameState } = world;\n\n    const networkConnectionQueue = createEventQueue<WebSocket>(\n        world.events,\n        NetworkEvent.Connect\n    );\n\n    const networkDisconnectQueue = createEventQueue<WebSocket>(\n        world.events,\n        NetworkEvent.Disconnect\n    );\n\n    let nextId = 0;\n\n    return defineSystem((world: IWorld) => {\n        for (const websocket of networkConnectionQueue) {\n            const playerId = nextId;\n\n            const eid = createPlayer(\n                world as IWorld & INetworkWorld,\n                {\n                    x: Math.random() * 128,\n                    y: Math.random() * 128,\n                },\n                playerId\n            );\n            gameState.players++;\n\n            entityById.set(playerId, eid);\n            socketById.set(playerId, websocket!);\n            idBySocket.set(websocket!, playerId);\n\n            const idBuffer = new ArrayBuffer(1);\n            new DataView(idBuffer).setUint8(0, playerId);\n            websocket!.send(idBuffer);\n\n            nextId++;\n        }\n\n        for (const ws of networkDisconnectQueue) {\n            const playerId = idBySocket.get(ws!)!;\n            console.log(\"DESPAWN PLAYER\", playerId);\n\n            killPlayer(world as IWorld & INetworkWorld, playerId);\n            gameState.players--;\n\n            socketById.delete(playerId);\n            idBySocket.delete(ws!);\n        }\n\n        return world;\n    });\n}\n\nexport function createPlayer(\n    world: IWorld & INetworkWorld,\n    pos: Vector,\n    playerId: number\n) {\n    const eid = addEntity(world);\n\n    world.networking.entityById.set(playerId, eid);\n\n    const components = [\n        Player,\n        Transform,\n        CircleCollider,\n        PlayerInput,\n        NetworkSync,\n        NetworkTransform,\n    ];\n\n    for (const component of components) {\n        addComponent(world, component, eid);\n    }\n\n    Transform.x[eid] = pos.x;\n    Transform.y[eid] = pos.y;\n\n    CircleCollider.radius[eid] = 8;\n    Player.id[eid] = playerId;\n\n    return eid;\n}\n\nexport function killPlayer(world: IWorld & INetworkWorld, playerId: number) {\n    const { entityById } = world.networking;\n\n    const eid = entityById.get(playerId);\n    if (eid !== undefined) {\n        removeEntity(world, eid);\n        entityById.delete(playerId);\n    }\n}\n", "import { ICommand } from \"roll-rounds-shared\";\n\nexport interface IPlayerCommand<T extends ICommand> {\n    playerId: number;\n    command: T;\n}\n\nexport function createPlayerCommand<T extends ICommand>(\n    playerId: number,\n    command: T\n): IPlayerCommand<T> {\n    return {\n        playerId,\n        command,\n    };\n}\n", "import { IWorld } from \"bitecs\";\nimport { Emitter } from \"mitt\";\nimport { createCustomDataView, deserializeCommand } from \"roll-rounds-shared\";\nimport { INetworkWorld } from \".\";\nimport { IEventWorld } from \"../events\";\nimport { createPlayerCommand } from \"../players/IPlayerCommand\";\nimport { NetworkEvent } from \"./events\";\n\nexport function setupNetworkMessageHandler(\n    world: IWorld & IEventWorld & INetworkWorld\n) {\n    const { idBySocket } = world.networking;\n\n    world.events.on(\n        NetworkEvent.Message,\n        ([ws, buffer]: [WebSocket, ArrayBuffer]) => {\n            const command = deserializeCommand(createCustomDataView(buffer));\n\n            world.events.emit(\n                command.type,\n                createPlayerCommand(idBySocket.get(ws)!, command)\n            );\n        }\n    );\n}\n", "import { defineSystem, IWorld } from \"bitecs\";\nimport { Emitter, EventType } from \"mitt\";\nimport { CommandType, IInputCommand, PlayerInput } from \"roll-rounds-shared\";\nimport { IEventWorld } from \"../events\";\nimport { INetworkWorld } from \"../networking\";\nimport { createEventQueue } from \"../utils/events\";\nimport { IPlayerCommand } from \"./IPlayerCommand\";\n\nexport function createPlayerInputSystem(\n    world: IWorld & INetworkWorld & IEventWorld\n) {\n    const inputCommandQueue = createEventQueue<IPlayerCommand<IInputCommand>>(\n        world.events,\n        CommandType.Input\n    );\n\n    const { entityById } = world.networking;\n\n    return defineSystem((world: IWorld) => {\n        for (const cmd of inputCommandQueue) {\n            const { playerId, command } = cmd!;\n            const eid = entityById.get(playerId)!;\n\n            PlayerInput.axes.x[eid] = command.axes.x;\n            PlayerInput.axes.y[eid] = command.axes.y;\n        }\n\n        return world;\n    });\n}\n", "import { addComponent, addEntity, IWorld } from \"bitecs\";\nimport { Pit, Transform, WORLD_HEIGHT, WORLD_WIDTH } from \"roll-rounds-shared\";\nimport { NetworkSync } from \"roll-rounds-shared/src/networking\";\nimport { NetworkTransform } from \"roll-rounds-shared/src/networking/networkTransform\";\n\nexport function setupPits(world: IWorld) {\n    const positions = [\n        [0, 0],\n        [0, WORLD_HEIGHT],\n        [WORLD_WIDTH, 0],\n        [WORLD_WIDTH, WORLD_HEIGHT],\n    ];\n\n    for (const [x, y] of positions) {\n        const eid = addEntity(world);\n\n        addComponent(world, Transform, eid);\n        addComponent(world, Pit, eid);\n        addComponent(world, NetworkSync, eid);\n        addComponent(world, NetworkTransform, eid);\n\n        Pit.size[eid] = 48;\n        Transform.x[eid] = x;\n        Transform.y[eid] = y;\n    }\n}\n", "import { defineQuery, defineSystem, IWorld, removeEntity } from \"bitecs\";\nimport { Body } from \"matter-js\";\nimport { Pit } from \"roll-rounds-shared/src/pits\";\nimport { Player, Transform, vectorLength, vectorSub } from \"roll-rounds-shared\";\nimport { createPlayer, killPlayer } from \"../players/playerSpawnSystem\";\nimport { INetworkWorld } from \"../networking\";\n\nexport function createPitDamageSystem(world: IWorld & INetworkWorld) {\n    const pitQuery = defineQuery([Pit]);\n    const playerQuery = defineQuery([Player]);\n\n    const {\n        physics: { bodyByEntity },\n    } = world;\n\n    return defineSystem((world: IWorld) => {\n        const players = playerQuery(world);\n        const pits = pitQuery(world);\n\n        for (const playerId of players) {\n            const playerTransform = {\n                x: Transform.x[playerId],\n                y: Transform.y[playerId],\n            };\n\n            const body = bodyByEntity.get(playerId)!;\n            if (!body) {\n                continue;\n            }\n\n            for (const pitId of pits) {\n                const pitTransform = {\n                    x: Transform.x[pitId],\n                    y: Transform.y[pitId],\n                };\n\n                const distanceVector = vectorSub(pitTransform, playerTransform);\n                const distance = vectorLength(distanceVector);\n\n                if (distance < 48) {\n                    // Transform.x[playerId] = WORLD_WIDTH / 2;\n                    // Transform.y[playerId] = WORLD_HEIGHT / 2;\n                    const connectionId = Player.id[playerId];\n\n                    killPlayer(world as IWorld & INetworkWorld, connectionId);\n                    setTimeout(() => {\n                        createPlayer(\n                            world as any,\n                            { x: 100, y: 100 },\n                            connectionId\n                        );\n                    }, 50);\n\n                    // Body.setVelocity(body, Vector.create());\n                }\n            }\n        }\n\n        return world;\n    });\n}\n", "import {\n    createTimeSystem,\n    createPlayerMovementSystem,\n    createPlayerCollissionSystem,\n    createPhysicsSystem,\n    setupGameState,\n    IGameStateWorld,\n    createRoundSystem,\n    IRoundsWorld,\n} from \"roll-rounds-shared\";\nimport { INetworkWorld, setupNetworkWorld, setupWsServer } from \"./networking\";\nimport { createWorld, IWorld, pipe } from \"bitecs\";\nimport { IEventWorld, setupEventQueue } from \"./events\";\nimport { createNetworkSyncSystem } from \"./networking/networkSyncSystem\";\nimport { createPlayerSpawnSystem } from \"./players/playerSpawnSystem\";\nimport { setupNetworkMessageHandler } from \"./networking/networkMessageHandler\";\nimport { createPlayerInputSystem } from \"./players/playerInputSystem\";\nimport { setupPits } from \"./pits\";\nimport { createPitDamageSystem } from \"./pits/pitDamageSystem\";\n\nconst UPDATE = 1 / 60;\n\nfunction main() {\n    const world: IWorld &\n        IEventWorld &\n        INetworkWorld &\n        IGameStateWorld &\n        IRoundsWorld = createWorld();\n    setupGameState(world);\n    setupEventQueue(world);\n    setupNetworkWorld(world);\n    setupWsServer(world);\n    setupNetworkMessageHandler(world as any);\n\n    setupPits(world);\n\n    const timeSystem = createTimeSystem(world);\n    const roundSystem = createRoundSystem(world);\n    const physicsSystem = createPhysicsSystem(world);\n    const networkSyncSystem = createNetworkSyncSystem(world);\n    const playerSpawnSystem = createPlayerSpawnSystem(world);\n    const playerInputSystem = createPlayerInputSystem(world);\n    const playerMovementSystem = createPlayerMovementSystem(world);\n    const playerCollissionSystem = createPlayerCollissionSystem();\n    const playerDamageSystem = createPitDamageSystem(world);\n\n    const pipeline = pipe(\n        timeSystem,\n        roundSystem,\n        playerSpawnSystem,\n        playerInputSystem,\n        playerMovementSystem,\n        playerCollissionSystem,\n        playerDamageSystem,\n        physicsSystem,\n        networkSyncSystem\n    );\n\n    update(world, pipeline);\n}\n\nfunction update(world: IWorld, pipeline: (input: IWorld) => IWorld) {\n    pipeline(world);\n\n    setTimeout(() => update(world, pipeline), UPDATE * 1000);\n}\n\nmain();\n"],
  "mappings": "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",
  "names": []
}
